#!/usr/bin/env python3

import abc
import os
import os.path
import re
import readline
import subprocess
import signal
import sys
import threading
import time


class TabCompleter:
    def __init__(self):
        self._completions = set()
        self._last_seen = {}

    def add(self, completion):
        self._completions.add(completion)
        self._last_seen[completion] = time.time()

    def complete(self, prefix):
        matching = [c for c in self._completions if c.startswith(prefix)]
        return sorted(matching, key=lambda c: self._last_seen[c])

    def rl_completer(self):
        completions = []

        def wrap(prefix, state):
            nonlocal completions
            if state == 0:
                completions = self.complete(prefix)

            if state < len(completions):
                return completions[state]

        return wrap


def init_readline(completer):
    readline.parse_and_bind('tab: complete')
    readline.set_completer(completer.rl_completer())


def control_code(fn):
    def wrap(*args, **kw):
        ch = fn(*args)
        sys.stdout.write(ch)
    return wrap


class Term:
    CLEAR_LINE = '\x1B[2K'
    START_OF_LINE = '\x1B[0G'
    START_OF_PREV = '\x1B[1F'
    START_OF_NEXT = '\x1B[1E'
    RESET = '\x1Bc'

    @staticmethod
    def write(*args):
        for c in args:
            sys.stdout.write(c)


_WRITE_LOCK = threading.Lock()


class synchronized_writes:
    def __enter__(self):
        _WRITE_LOCK.acquire()

    def __exit__(self, type, value, traceback):
        readline.redisplay()
        _WRITE_LOCK.release()


def tail_file(path, nlines=1000):
    return subprocess.Popen([
        'tail',
        '-n', str(nlines),
        '-F', path
    ], stdout=subprocess.PIPE)


class Throttler(abc.ABC):
    def __init__(self):
        self._next_commit_at = None
        self._event = threading.Event()

    def start_thread(self):
        def _wrapper():
            return self._loop()

        return threading.Thread(
            target=_wrapper,
            daemon=True
        ).start()

    def _loop(self):
        while True:
            self._event.wait()
            self._event.clear()

            time.sleep(max(self._next_commit_at - time.time(), 0))

            if not self._event.is_set():
                self.commit()

    def schedule(self, delay_ms):
        self._next_commit_at = time.time() + (delay_ms / 1000.0)
        self._event.set()

    @abc.abstractmethod
    def commit(self):
        ...


class WriteThrottler(Throttler):
    def __init__(self, out_path):
        super().__init__()

        self._write_buffer = []
        self._out_path = out_path

    def write(self, line):
        with synchronized_writes():
            self._write_buffer.append(line)
            self.schedule(delay_ms=100)

    def commit(self):
        with synchronized_writes():
            num_lines = len(self._write_buffer)
            if num_lines > 1:
                prompt = (
                    f"Send {num_lines} lines of text? [y/N] "
                )

                if input(prompt).strip() != 'y':
                    self._write_buffer = []
                    return

            with open(self._out_path, 'wb', buffering=0) as fifo:
                while self._write_buffer:
                    line = self._write_buffer.pop(0)
                    byte_str = (line + '\n').encode('utf-8')
                    fifo.write(byte_str)


class RedrawThrottler(Throttler):
    """
    readline.redisplay() doesn't force a redraw, but SIGWINCH does.

    Also, debounce by deferring the SIGWINCH until we haven't received
    a new line for a few ms (to prevent a flood of kill calls on
    startup).
    """
    def commit(self):
        # Don't want to trip this in the middle of a write
        with synchronized_writes():
            os.kill(os.getpid(), signal.SIGWINCH)
            time.sleep(0.250)


# "22:14:03 \x1b[23mNICK\x1b[0m message"
_NICK_REGEX = re.compile('^\\S+ \x1b[^m]+m\\s*(.*?)\x1b')


def _extract_nick(line):
    """
    Try to strip out the color codes etc from the line, returning only
    the nick (or '').
    """

    match = _NICK_REGEX.match(line)
    if not match:
        return ''

    return match.group(1)


def _print_lines(out, redrawer, completer):
    with synchronized_writes():
        Term.write(Term.RESET)

    for line in out:
        line = line.decode('utf-8', 'replace').rstrip()

        completer.add(_extract_nick(line))

        with synchronized_writes():
            Term.write(
                Term.CLEAR_LINE,
                Term.START_OF_LINE,
                line, '\n',
                Term.START_OF_NEXT
            )

            redrawer.schedule(delay_ms=250)


def print_lines(proc, redrawer, completer):
    return threading.Thread(
        target=_print_lines,
        args=[proc, redrawer, completer],
        daemon=True
    ).start()


BG_BLACK = '\x1B[40m'
FG_WHITE = '\x1B[37m'
RESET = '\x1B[0m'


def input_loop(path, name, last_name):
    input_path = os.path.join(path, 'in')

    writer = WriteThrottler(input_path)
    writer.start_thread()

    prompt = '%s%s[ %s ]%s ' % (BG_BLACK, FG_WHITE, name, RESET)

    while True:
        try:
            line = input(prompt).strip()

            with synchronized_writes():
                Term.write(
                    Term.START_OF_PREV,
                    Term.CLEAR_LINE
                )

            if line == '':
                continue

            # Jump to another buffer
            elif line.startswith('/switch'):
                split = line.strip().split(' ', 2)
                if len(split) == 1:
                    return last_name
                return split[1]

            # ¯\_(ツ)_/¯
            elif line.startswith('/shrug'):
                rest = line[len('/shrug'):].strip()
                line = '%s ¯\\_(ツ)_/¯' % rest

            # Force full re-render
            elif line == '/refresh':
                return name

            writer.write(line)


        # Interrupt triggers rerender
        except KeyboardInterrupt:
            return name

        except EOFError:
            break


def select_buffer_path(path, name, last_name):
    for f in ['in', 'out']:
        f = os.path.join(path, f)

        if not os.path.exists(f):
            print('%s: no such directory' % f)
            sys.exit(1)

    completer = TabCompleter()
    init_readline(completer)

    redrawer = RedrawThrottler()
    redrawer.start_thread()

    proc = tail_file(os.path.join(path, 'out'))
    print_lines(proc.stdout, redrawer, completer)

    next_buf = input_loop(path, name, last_name)

    # Kill the `tail` command to clean up after ourselves.
    proc.kill()

    return next_buf


def main():
    if len(sys.argv) != 2:
        print('usage: %s PATH' % sys.argv[0])
        sys.exit(1)

    full_path = sys.argv[1].rstrip('/')

    name = os.path.basename(full_path)
    path = os.path.dirname(full_path)

    last_name = name
    while name is not None:
        prev = last_name
        last_name = name

        name = run_client(path, name, prev)


def run_client(path, name, last_name):
    full_path = os.path.join(path, name)
    if not os.path.exists(full_path):
        print('%s: no such directory' % full_path)
        sys.exit(1)

    name = select_buffer_path(full_path, name, last_name)

    # Special case: server buffer is top level in directory
    if name == '$server':
        return ''

    return name


if __name__ == '__main__':
    main()
